@page
@{
    ViewData["Title"] = "Dashboard - Upload Document";
}


<!-- Editor Header - Full Width -->
<div class="editor-header">
    <h1>Upload a Document</h1>
</div>
<!-- File upload section -->
<div class="file-upload-container">
    <input type="file" id="fileInput" name="UploadedFile" required class="file-input" />
    <button type="button" id="uploadButton" class="upload-button">Upload</button>
</div>

<!-- Upload Button -->
<div>

</div>

<!-- Test Case Buttons -->
<!-- Test Case Table in the Center -->
<div class="test-table-container">
    <table id="testCaseTable" class="test-case-table">
        <thead>
            <tr>
                <th>Module</th>
                <th>Pass Case</th>
                <th>Fail Case</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>MOD1</td>
                <td><button type="button" onclick="runCitationTest1Pass()" class="test-button success">Pass</button>
                </td>
                <td><button type="button" onclick="runCitationTest1Fail()" class="test-button fail">Fail</button></td>
            </tr>
            <tr>
                <td>MOD2</td>
                <td><button type="button" onclick="runCitationTest2Pass()" class="test-button success">Pass</button>
                </td>
                <td><button type="button" onclick="runCitationTest2Fail()" class="test-button fail">Fail</button></td>
            </tr>
            <tr>
                <td>MOD3</td>
                <td><button type="button" onclick="runCitationTest3Pass()" class="test-button success">Pass</button>
                </td>
                <td><button type="button" onclick="runCitationTest3Fail()" class="test-button fail">Fail</button></td>
            </tr>
        </tbody>
    </table>
</div>


<!-- Conversion Status Tracker -->
<div id="statusTracker" class="status-tracker">
    <p id="statusMessage">Status: </p>
    <div id="statusBar" class="status-bar">
        <div id="statusProgress" class="status-progress"></div>
    </div>
</div>


<!-- Modal for Error Message -->
<div id="errorModal" class="modal error-modal">
    <h4>Error</h4>
    <p id="errorMessage" class="error-message"></p>
    <button onclick="closeModal()" class="modal-button close-error-modal">Close</button>
</div>

<!-- Modal for Success Message -->
<div id="successModal" class="modal success-modal">
    <h4>Success</h4>
    <p id="successMessage" class="success-message"></p>
    <button onclick="closeSuccessModal()" class="modal-button close-success-modal">Close</button>
</div>

<!-- Error Log Section with Table -->
<div id="logSection" class="log-section">
    <h4>Error Logs</h4>
    <table id="logTable" class="log-table">
        <thead>
            <tr>
                <th>#</th>
                <th>Timestamp</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody id="logMessages">
            <!-- Logs will be dynamically added here -->
        </tbody>
    </table>
</div>



<script>
    document.getElementById("uploadButton").addEventListener("click", function (event) {
        event.preventDefault(); // Prevent default form submission

        let formData = new FormData();
        let fileInput = document.getElementById("fileInput").files[0];

        // Check if no file is selected
        if (!fileInput) {
            logError("No file selected for upload.");
            alert("Please select a file to upload.");
            return;
        }

        // Update file name
        document.getElementById("fileInput").innerText = fileInput.name;

        // Check if the file is a .docx
        //let fileExtension = fileInput.name.split('.').pop().toLowerCase();

        //UNCOMMENT THIS IF CLASS DECIDE TO ACCEPT DOCX FILE ONLY
        @* if (fileExtension !== "docx") {
        logError("Invalid file type. Only .docx files are allowed.");
        alert("Only .docx files are allowed. Please upload a valid .docx file.");
        document.getElementById("fileInput").value = ""; // Clear the file input
        return;
    } *@

            formData.append("UploadedFile", fileInput); // Ensure this matches the parameter name in the controller

        fetch("/dashboard/upload", {
            method: "POST",
            body: formData
        })
            .then(response => {
                // First store the response status
                const isRedirect = response.redirected;
                const redirectUrl = response.url;

                // Try to parse response as JSON first
                return response.text().then(text => {
                    try {
                        return {
                            data: text ? JSON.parse(text) : null,
                            isRedirect: isRedirect,
                            redirectUrl: redirectUrl
                        };
                    } catch (e) {
                        return {
                            data: null,
                            isRedirect: isRedirect,
                            redirectUrl: redirectUrl
                        };
                    }
                });
            })
            .then(({ data, isRedirect, redirectUrl }) => {
                // Show progress first
                resetProgressBar();
                document.getElementById("statusMessage").innerText = "Status: Converting...";

                let progress = 0;
                let totalSteps = 6;
                const progressInterval = setInterval(() => {
                    if (progress < totalSteps) {
                        progress++;
                        let progressMessage = `Progress: ${progress}/6 (${getProgressText(progress)})`;
                        logError(progressMessage);
                        document.getElementById("statusProgress").style.width = (progress / totalSteps) * 100 + "%";
                        document.getElementById("statusMessage").innerText = progressMessage;
                    } else {
                        clearInterval(progressInterval);
                        logError("All Conversions Completed");
                        document.getElementById("statusMessage").innerText = "All Conversions Completed";
                        document.getElementById("statusProgress").style.backgroundColor = 'green';

                        // Only redirect after showing completion
                        if (isRedirect) {
                            window.location.href = redirectUrl;
                        }
                    }
                }, 1000);

                if (!isRedirect && data) {
                    if (!data.success) {
                        logError(data.message);
                        alert("Error: " + data.message);
                    }
                }
            })
            .catch(error => {
                logError("Upload failed: " + error.message);
                console.error("Upload error:", error);
            });

        // Clear the file input after the form submission
        document.getElementById("fileInput").value = "";
    });

    // Function to get the progress text for each step
    function getProgressText(step) {
        switch (step) {
            case 1: return "Mod 1 Conversion";
            case 2: return "Mod 1 Test Case";
            case 3: return "Mod 2 Conversion";
            case 4: return "Mod 2 Test Case";
            case 5: return "Mod 3 Conversion";
            case 6: return "Mod 3 Test Case";
            default: return "";
        }
    }

    // Function to reset the progress bar
    function resetProgressBar() {
        // Reset progress bar width
        document.getElementById("statusProgress").style.width = '0%';
        document.getElementById("statusProgress").style.backgroundColor = '#007bff'; // Optional: Reset color to the default

        // Reset status message
        document.getElementById("statusMessage").innerText = "Status: ";
    }


    function logError(message) {
        const logMessages = document.getElementById("logMessages");

        // Get the current timestamp
        const timestamp = new Date().toLocaleString();

        // Create a new row for the table
        const newRow = document.createElement("tr");

        // Add cells with error details
        const indexCell = document.createElement("td");
        const timestampCell = document.createElement("td");
        const messageCell = document.createElement("td");

        indexCell.innerText = logMessages.children.length + 1; // Incrementing index for each new log
        timestampCell.innerText = timestamp;
        messageCell.innerText = message;

        // Append the cells to the row
        newRow.appendChild(indexCell);
        newRow.appendChild(timestampCell);
        newRow.appendChild(messageCell);

        // Insert the row at the top for latest logs
        logMessages.insertBefore(newRow, logMessages.firstChild);
    }

    function runCitationTest1Pass() {
        // Call the backend to run the first set of test cases (MOD1)
        fetch('/dashboard/runtestmod1pass')
            .then(response => response.json())
            .then(data => {
                // Log the start of the test
                logError("Test Case Started (MOD1)");
                // Reset progress bar and status message before starting a new progress
                resetProgressBar();
                let progress = 0;
                let progressInterval = setInterval(() => {
                    if (progress < 100) {
                        progress += 20; // Simulate progress
                        logError("Test Case Progress (MOD1): " + progress + "%");
                        document.getElementById("statusProgress").style.width = progress + "%";
                        document.getElementById("statusMessage").innerText = "Status: " + progress + "%";
                    } else {
                        clearInterval(progressInterval);
                        if (data.message.includes("Test Passed")) {
                            logError("Test Case Completed Successfully (MOD1)!");
                            document.getElementById("statusMessage").innerText = "Test Case Completed (MOD1)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'green';
                        } else {
                            logError("Test Case Passed (MOD1): " + data.message);
                            document.getElementById("statusMessage").innerText = "Test Case Failed (MOD1)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'red';
                        }
                    }
                }, 1000); // Update every 1 second
            })
            .catch(error => {
                // Log any error that occurs
                logError("Test (MOD1) failed: " + error);
            });
    }

    function runCitationTest1Fail() {
        // Call the backend to run the second set of test cases (MOD1)
        fetch('/dashboard/runtestmod1fail')
            .then(response => response.json())
            .then(data => {
                // Log the start of the test
                logError("Test Case Started (MOD1)");
                // Reset progress bar and status message before starting a new progress
                resetProgressBar();

                let progress = 0;
                let progressInterval = setInterval(() => {
                    if (progress < 100) {
                        progress += 20; // Simulate progress
                        logError("Test Case Progress (MOD1): " + progress + "%");
                        document.getElementById("statusProgress").style.width = progress + "%";
                        document.getElementById("statusMessage").innerText = "Status: " + progress + "%";
                    } else {
                        clearInterval(progressInterval);
                        if (data.message.includes("Test Passed")) {
                            logError("Test Case Completed Successfully (MOD1)!");
                            document.getElementById("statusMessage").innerText = "Test Case Completed (MOD1)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'green';
                        } else {
                            logError("Test Case Failed (MOD1): " + data.message);
                            document.getElementById("statusMessage").innerText = "Test Case Failed (MOD1)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'red';
                        }
                    }
                }, 1000); // Update every 1 second
            })
            .catch(error => {
                // Log any error that occurs
                logError("Test (MOD1) failed: " + error);
            });
    }

    // Function to run the citation test and log the results in the error log
    function runCitationTest3Fail() {
        fetch('/dashboard/runtestmod3fail')
            .then(response => response.json())
            .then(data => {
                // Log each progress update into the error log table
                logError("Test Case Started (MOD3)");
                // Reset progress bar and status message before starting a new progress
                resetProgressBar();
                let progress = 0;
                let progressInterval = setInterval(() => {
                    if (progress < 100) {
                        progress += 20; // Simulating progress in 20% increments
                        logError("Test Case Progress (MOD3): " + progress + "%");
                        // Update the progress bar width based on the current progress
                        document.getElementById("statusProgress").style.width = progress + "%";
                        document.getElementById("statusMessage").innerText = "Status: " + progress + "%";
                    } else {
                        clearInterval(progressInterval);
                        if (data.message.includes('Test Passed')) {
                            logError("Test Case Completed Successfully!");
                            document.getElementById("statusMessage").innerText = "Test Case Completed!";
                            document.getElementById("statusProgress").style.backgroundColor = 'green';
                        } else {
                            logError("Test Case Failed (MOD3): " + data.message); // Log final result as failure
                            document.getElementById("statusMessage").innerText = "Test Case Failed!";
                            document.getElementById("statusProgress").style.backgroundColor = 'red';
                        }
                    }
                }, 1000); // Update progress every 1 second
            })
            .catch(error => {
                // Handle error
                logError("Citation Test failed: " + error);  // Log the error in the log section
            });
    }


    // Function to run the citation test and log the results in the error log
    function runCitationTest3Pass() {
        fetch('/dashboard/runtestmod3pass')
            .then(response => response.json())
            .then(data => {
                // Log each progress update into the error log table
                logError("Test Case Started (MOD3)");
                // Reset progress bar and status message before starting a new progress
                resetProgressBar();
                let progress = 0;
                let progressInterval = setInterval(() => {
                    if (progress < 100) {
                        progress += 20; // Simulating progress in 20% increments
                        logError("Test Case Progress (MOD3): " + progress + "%");
                        // Update the progress bar width based on the current progress
                        document.getElementById("statusProgress").style.width = progress + "%";
                        document.getElementById("statusMessage").innerText = "Status: " + progress + "%";
                    } else {
                        clearInterval(progressInterval);
                        if (data.message.includes('Test Passed')) {
                            logError("Test Case Completed Successfully! (MOD3)");
                            document.getElementById("statusMessage").innerText = "Test Case Completed!";
                            document.getElementById("statusProgress").style.backgroundColor = 'green';
                        } else {
                            logError("Test Case Failed: " + data.message); // Log final result as failure
                            document.getElementById("statusMessage").innerText = "Test Case Failed!";
                            document.getElementById("statusProgress").style.backgroundColor = 'red';
                        }
                    }
                }, 1000); // Update progress every 1 second
            })
            .catch(error => {
                // Handle error
                logError("Citation Test failed: " + error);  // Log the error in the log section
            });
    }



    function runCitationTest2Pass() {
        // Call the backend to run the second set of test cases (MOD2)
        fetch('/dashboard/runtestmod2pass')
            .then(response => response.json())
            .then(data => {
                // Log the start of the test
                logError("Test Case Started (MOD2)");
                // Reset progress bar and status message before starting a new progress
                resetProgressBar();

                let progress = 0;
                let progressInterval = setInterval(() => {
                    if (progress < 100) {
                        progress += 20; // Simulate progress
                        logError("Test Case Progress (MOD2): " + progress + "%");
                        document.getElementById("statusProgress").style.width = progress + "%";
                        document.getElementById("statusMessage").innerText = "Status: " + progress + "%";
                    } else {
                        clearInterval(progressInterval);
                        if (data.message.includes("Test Passed")) {
                            logError("Test Case Completed Successfully (MOD2)!");
                            document.getElementById("statusMessage").innerText = "Test Case Completed (MOD2)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'green';
                        } else {
                            logError("Test Case Passed (MOD2): " + data.message);
                            document.getElementById("statusMessage").innerText = "Test Case Failed (MOD2)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'red';
                        }
                    }
                }, 1000); // Update every 1 second
            })
            .catch(error => {
                // Log any error that occurs
                logError("Test (MOD2) failed: " + error);
            });
    }


    function runCitationTest2Fail() {
        // Call the backend to run the second set of test cases (MOD2)
        fetch('/dashboard/runtestmod2fail')
            .then(response => response.json())
            .then(data => {
                // Log the start of the test
                logError("Test Case Started (MOD2)");
                // Reset progress bar and status message before starting a new progress
                resetProgressBar();

                let progress = 0;
                let progressInterval = setInterval(() => {
                    if (progress < 100) {
                        progress += 20; // Simulate progress
                        logError("Test Case Progress (MOD2): " + progress + "%");
                        document.getElementById("statusProgress").style.width = progress + "%";
                        document.getElementById("statusMessage").innerText = "Status: " + progress + "%";
                    } else {
                        clearInterval(progressInterval);
                        if (data.message.includes("Test Passed")) {
                            logError("Test Case Completed Successfully (MOD2)!");
                            document.getElementById("statusMessage").innerText = "Test Case Completed (MOD2)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'green';
                        } else {
                            logError("Test Case Failed (MOD2): " + data.message);
                            document.getElementById("statusMessage").innerText = "Test Case Failed (MOD2)!";
                            document.getElementById("statusProgress").style.backgroundColor = 'red';
                        }
                    }
                }, 1000); // Update every 1 second
            })
            .catch(error => {
                // Log any error that occurs
                logError("Test (MOD2) failed: " + error);
            });
    }
</script>

<!-- Styles for the page -->
<style>
    /* File upload section styles */
    .file-upload-container {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        padding-top: 15px;
    }

    .file-input {
        padding: 10px;
        margin-right: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        width: 300px;
    }

    .file-name {
        font-size: 16px;
        color: #555;
    }

    .upload-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;

    }

    .test-button {
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
    }

    .status-tracker {
        margin-top: 20px;
    }

    .status-bar {
        width: 100%;
        height: 20px;
        background-color: #f3f3f3;
    }

    .status-progress {
        width: 0%;
        height: 100%;
        background-color: green;
    }

    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        padding: 20px;
        border-radius: 5px;
        z-index: 9999;
        max-width: 400px;
        width: 100%;
        text-align: center;
    }

    .error-modal {
        background: rgba(0, 0, 0, 0.7);
    }

    .success-modal {
        background: rgba(0, 128, 0, 0.7);
    }

    .log-section {
        margin-top: 30px;
        padding: 10px;
        background-color: #f7f7f7;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .log-table {
        width: 100%;
        border-collapse: collapse;
    }

    .log-table th,
    .log-table td {
        padding: 10px;
        border: 1px solid #ccc;
        text-align: left;
    }

    .log-table th {
        background-color: #007bff;
        color: white;
    }

    .log-messages {
        max-height: 200px;
        overflow-y: auto;
        margin-top: 10px;
        color: #d9534f;
    }

    .modal-button {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
    }

    .close-error-modal {
        background-color: #dc3545;
        color: white;
    }

    .close-success-modal {
        background-color: #28a745;
        color: white;
    }

    #statusMessage {
        margin-top: 20px;
        color: #333;
    }


    .test-buttons-container {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

    /* Custom header with dark background */
    .editor-header {
        background-color: #2c3e50;
        color: white;
        padding: 1rem;
        margin-left: -15px;
        margin-right: -15px;
        margin-top: -16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }


    /* Fail Test Case Button Styles */
    .test-button-fail {
        background-color: #f44336;
        /* Light Red */
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
        transition: background-color 0.3s ease;
    }

    .test-button-fail:hover {
        background-color: #d32f2f;
        /* Darker Red for hover effect */
    }

    /* Success Test Case Button Styles */
    .test-button-pass {
        background-color: #28a745;
        /* Green for Passed */
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
        transition: background-color 0.3s ease;
    }

    .test-button-pass:hover {
        background-color: #218838;
        /* Darker Green for hover effect */
    }

    /* Centered Table Container */
    .test-table-container {
        width: 60%;
        margin: 30px auto;
        padding: 10px;
        border-radius: 5px;
        @* background-color: #dc0f0f; *@
    }

    /* Table Styling */
    .test-case-table {
        width: 100%;
        border-collapse: collapse;
        text-align: center;
        margin: 20px 0;
    }

    .test-case-table th,
    .test-case-table td {
        padding: 15px;
        border: 1px solid #e1d9d9;
    }

    .test-case-table th {
        background-color: #007bff;
        color: white;
    }

    /* Button Styling for Success and Fail */
    .test-button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
    }

    .test-button.success {
        background-color: #28a745;
        /* Green */
        color: white;
    }

    .test-button.success:hover {
        background-color: #218838;
    }

    .test-button.fail {
        background-color: #f44336;
        /* Red */
        color: white;
    }

    .test-button.fail:hover {
        background-color: #d32f2f;
    }

    /* Add these styles to center the file upload section */
    .file-upload-container {
        display: flex;
        align-items: center;
        justify-content: center;
        /* Center horizontally */
        margin: 15px auto;
        /* Add auto margin for horizontal centering */
        padding-top: 15px;
        width: 60%;
        /* Set width to match the test table container */
    }

    /* Center the upload button */
    div:has(> #uploadButton) {
        display: flex;
        justify-content: center;
        margin: 0 auto;
        width: 60%;
    }

    /* Make sure the file input has enough width */
    .file-input {
        padding: 10px;
        margin-right: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        width: 70%;
        /* Adjusted width */
    }

    /* Optional: Center the status tracker as well */
    .status-tracker {
        margin: 20px auto;
        width: 60%;
    }
</style>
