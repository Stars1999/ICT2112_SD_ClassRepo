@page
@model EditorModel
@{
    ViewData["Title"] = "LaTeX Editor";
}

@section Styles {
    <style>
        /* Custom header with dark background */
        .editor-header {
            background-color: #2c3e50;
            color: white;
            padding: 1rem;
            margin-left: -15px;
            margin-right: -15px;
            margin-top: -16px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* Override container for full width */
        .editor-container-fluid {
            width: 100%;
            padding-right: 0;
            padding-left: 0;
            margin-right: 0;
            margin-left: 0;
        }

        /* Make editor take more space */
        #latex-editor {
            width: 100%;
            min-height: 300px;
            height: 100%;
            resize: none;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            border-radius: 0;
        }

        /* Set fixed heights for content areas */
        .content-area {
            height: calc(100vh - 350px);
            min-height: 300px;
            overflow: auto;
        }

        /* Section headers */
        .section-header {
            background-color: #f8f9fa;
            padding: 0.5rem;
            font-weight: bold;
            border-bottom: 1px solid #dee2e6;
        }

        /* Error items */
        .error-high {
            border-left: 4px solid #dc3545;
            background-color: #f8d7da;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .error-medium {
            border-left: 4px solid #ffc107;
            background-color: #fff3cd;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
        }

        /* Status bar */
        .status-bar {
            background-color: #f8f9fa;
            padding: 0.5rem;
            border-top: 1px solid #dee2e6;
            font-size: 12px;
            display: flex;
            justify-content: space-between;
        }
    </style>
}

<!-- Editor Header - Full Width -->
<div class="editor-header">
    <h1>LaTeX Editor</h1>
    <div>
        <button id="download-pdf-btn" class="btn btn-primary">Download PDF</button>
    </div>
</div>

<!-- Toolbar -->
<div class="bg-light d-flex align-items-center p-2 border-bottom mb-2">
    <button id="compile-btn" class="btn btn-primary me-2">Compile</button>
    <button id="save-btn" class="btn btn-primary me-2">Save</button>
    <select id="bibliography-style" class="form-select me-2" style="width: auto;">
        <option value="apa">APA</option>
        <option value="mla">MLA</option>
    </select>
    <label for="bibliography-style">Bibliography Style</label>
</div>

<!-- Editor and Preview -->
<div class="row mx-0">
    <!-- LaTeX Editor Section -->
    <div class="col-md-6 px-0 border-end">
        <div class="section-header">LaTeX Editor</div>
        <div class="content-area">
            <textarea id="latex-editor" class="form-control border-0 p-2">\documentclass{article}
\title{Sample Document}
\author{User}
\date{\today}

\begin{document}
\maketitle

\section{Introduction}
This is a sample LaTeX document.

\end{document}</textarea>
        </div>
    </div>
    
    <!-- Preview Section -->
    <div class="col-md-6 px-0">
        <div class="section-header">PDF Preview</div>
        <div class="content-area p-2" id="pdf-preview">
            <p class="text-secondary">PDF preview will appear here after compilation.</p>
            <img src="/api/placeholder/600/800" alt="PDF preview placeholder" class="img-fluid" />
        </div>
    </div>
</div>

<!-- Error Panel -->
<div class="mt-3">
    <div class="section-header">Errors and Warnings</div>
    <div id="error-list" class="p-2" style="max-height: 150px; overflow-y: auto;">
        <div class="error-high">
            <strong>Line 10:</strong> Missing closing bracket for \begin{document} command
        </div>
        <div class="error-medium">
            <strong>Line 15:</strong> Undefined reference to 'fig:sample'
        </div>
    </div>
</div>

<!-- Status Bar -->
<div class="status-bar mt-2">
    <div id="compilation-status">Ready</div>
    <div id="document-info">Lines: 10 | Words: 50</div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const compileBtn = document.getElementById('compile-btn');
            const downloadPdfBtn = document.getElementById('download-pdf-btn');
            const saveBtn = document.getElementById('save-btn');
            const latexEditor = document.getElementById('latex-editor');
            const errorList = document.getElementById('error-list');
            const compilationStatus = document.getElementById('compilation-status');
            
            // Example event handler for compilation
            compileBtn.addEventListener('click', function() {
                compilationStatus.textContent = 'Compiling...';
                
                // For ASP.NET integration, we can use AJAX to call a controller method
                fetch('@Url.Action("CompileLaTeX", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        latex: latexEditor.value,
                        bibliographyStyle: document.getElementById('bibliography-style').value
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    compilationStatus.textContent = 'Compilation completed';
                    
                    // Handle errors from the server
                    if (data.errors && data.errors.length > 0) {
                        errorList.innerHTML = '';
                        data.errors.forEach(error => {
                            const errorClass = error.severity === 'high' ? 'error-high' : 'error-medium';
                            const errorItem = document.createElement('div');
                            errorItem.className = errorClass;
                            errorItem.innerHTML = `<strong>Line ${error.lineNumber}:</strong> ${error.message}`;
                            errorList.appendChild(errorItem);
                        });
                    } else {
                        errorList.innerHTML = ''; // Clear errors if none
                    }
                    
                    // Update PDF preview if available
                    if (data.pdfUrl) {
                        document.getElementById('pdf-preview').innerHTML = 
                            `<iframe src="${data.pdfUrl}" width="100%" height="100%" style="border: none;"></iframe>`;
                    }
                })
                .catch(error => {
                    compilationStatus.textContent = 'Compilation failed';
                    console.error('Error:', error);
                });
            });
            
            downloadPdfBtn.addEventListener('click', function() {
                window.location.href = '@Url.Action("DownloadPDF", "Home")';
            });
            
            saveBtn.addEventListener('click', function() {
                fetch('@Url.Action("SaveDocument", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        latex: latexEditor.value 
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || 'Document saved!');
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to save document');
                });
            });
            
            // Calculate line and word count
            function updateDocInfo() {
                const text = latexEditor.value;
                const lines = text.split('\n').length;
                const words = text.split(/\s+/).filter(word => word.length > 0).length;
                document.getElementById('document-info').textContent = `Lines: ${lines} | Words: ${words}`;
            }
            
            latexEditor.addEventListener('input', updateDocInfo);
            updateDocInfo(); // Initial count
        });
    </script>
}