@page
@model ICT2106WebApp.Pages.Logger
@{
    ViewData["Title"] = "Logger Page";
}

<h2>Application Logs</h2>

<!-- Add Log Button -->
<form method="post" class="log-action">
    <button type="submit" asp-page-handler="AddLog" class="btn-primary">Add Log</button>
</form>

<!-- Filter Form -->
<form method="get" class="filter-form">
    <div class="filter-container">
        <label for="date">Filter by Date:</label>
        <input type="date" id="date" name="FilterDate" value="@Model.FilterDate?.ToString("yyyy-MM-dd")" />

        <label for="location">Filter by Location:</label>
        <select id="location" name="FilterLocation">
            <option value="">All Locations</option>
            @foreach (var location in Model.AvailableLocations)
            {
                <option value="@location" selected="@(Model.FilterLocation == location ? "selected" : null)">
                    @location
                </option>
            }
        </select>

        <button type="submit" class="btn-filter">Filter</button>
        <a href="/Logger" class="btn-reset">Reset</a> <!-- Reset Button -->
    </div>
</form>

<!-- Responsive Table Container -->
<div class="table-container">
    <table id="logTable">
        <thead>
            <tr>
                <th>Timestamp <button onclick="sortTable()"><i id="sortIcon" class="fa fa-arrow-down"></i></button> </th>
                <th>Description</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Logs != null && Model.Logs.Count > 0)
            {
                foreach (var log in Model.Logs)
                {
                    <tr>
                        <td>@log.GetLogDetails().Item2.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@log.GetLogDetails().Item3</td>
                        <td>@log.GetLogDetails().Item4</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3">No logs available.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination Controls -->
<div class="pagination">
    <button onclick="changePage(-1)" id="btnPrev">Prev</button>
    <span id="pageInfo"></span>
    <button onclick="changePage(1)" id="btnNext">Next</button>
</div>

<!-- Download Button -->
<form method="get" action="/Logger">
    <input type="hidden" name="FilterDate" value="@Model.FilterDate?.ToString("yyyy-MM-dd")" />
    <input type="hidden" name="FilterLocation" value="@Model.FilterLocation" />
    <input type="hidden" name="handler" value="DownloadLog">
    <button type="submit" class="btn btn-primary">Download Logs</button>
</form>

<!-- Styles for Better UI -->
<style>
    .pagination {
        display: flex;
        justify-content: flex-end; /* Align pagination controls to the right */
        align-items: center;
        margin-top: 20px;
        margin-bottom: 20px; /* Add space below the pagination for better spacing */
    }

    .page-item {
        margin: 4px;
    }

    .page-link {
        padding: 8px 16px;
        text-decoration: none;
        color: #007bff;
    }

    .page-item.disabled .page-link {
        color: #ccc;
    }

    .page-item.active .page-link {
        background-color: #007bff;
        color: white;
    }
    .log-action {
        margin-bottom: 15px;
    }

    .filter-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 15px;
    }

    .table-container {
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th {
        background-color: #4A4A4A; /* Darker grey */
        color: white; /* White text for contrast */
        padding: 12px;
        text-align: left;
    }

    td {
        padding: 10px;
        border: 1px solid #ddd;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .btn-primary, .btn-filter, .btn-reset, .btn-download {
        padding: 8px 12px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-filter {
        background-color: #28a745;
        color: white;
    }

    .btn-reset {
        background-color: #dc3545;
        color: white;
        text-decoration: none;
        padding: 8px 12px;
        display: inline-block;
    }

    .btn-download {
        background-color: #17a2b8;
        color: white;
    }

    .btn-primary:hover, .btn-filter:hover, .btn-reset:hover, .btn-download:hover {
        opacity: 0.8;
    }
</style>

<script>
    var sortOrder = 'asc';  // Initial sort order

    function sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("logTable");
        switching = true;
        // Run loop until no switching is done
        while (switching) {
            switching = false;
            rows = table.rows;
            // Loop through all table rows (except the first, which contains table headers)
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[0];
                y = rows[i + 1].getElementsByTagName("TD")[0];
                // Check if the two rows should switch place, based on the direction, asc or desc
                if (sortOrder === 'asc') {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (sortOrder === 'desc') {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                // If a switch has been marked, make the switch and mark that a switch has been done
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
        // Toggle sort order for next click
        sortOrder = (sortOrder === 'asc') ? 'desc' : 'asc';
        // Update icon based on sort order
        document.getElementById("sortIcon").className = sortOrder === 'asc' ? 'fa fa-arrow-down' : 'fa fa-arrow-up';
    }
</script>
<script>
    var currentPage = 1;
    var rowsPerPage = 10;

    window.onload = function() {
        setupPagination();
    };

    function setupPagination() {
        var table = document.getElementById("logTable");
        var rows = table.getElementsByTagName("tr");
        var totalRows = rows.length - 1; // Subtract the header row
        var totalPages = Math.ceil(totalRows / rowsPerPage);

        document.getElementById("pageInfo").textContent = "Page " + currentPage + " of " + totalPages;

        for (var i = 1; i < rows.length; i++) { // Start at 1 to skip the header row
            if (i < (currentPage * rowsPerPage) + 1 && i > ((currentPage - 1) * rowsPerPage)) {
                rows[i].style.display = ""; // Show rows for current page
            } else {
                rows[i].style.display = "none"; // Hide other rows
            }
        }

        // Disable Prev button on the first page and Next button on the last page
        document.getElementById("btnPrev").disabled = (currentPage == 1);
        document.getElementById("btnNext").disabled = (currentPage == totalPages);
    }

    function changePage(step) {
        currentPage += step;
        setupPagination();
    }
</script>
